// *****************************************************************************
// memory.xl                                                          XL project
// *****************************************************************************
//
// File description:
//
//     Implementation of the memory management interface
//
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3+
// (C) 2018-2020, Christophe de Dinechin <christophe@dinechin.org>
// *****************************************************************************
// This file is part of XL
//
// XL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// XL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with XL, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************

MEMORY is
// ----------------------------------------------------------------------------
//    Implementation of the memory module
// ----------------------------------------------------------------------------

    Align Size:size, To:size            as size is
    // ------------------------------------------------------------------------
    //   Compute aligned size
    // ------------------------------------------------------------------------
        (Size + (To - 1)) / To * To


    // Convert number of bits to number of bytes
    // These are not simple casts, but do an actual computation
    byte_count  B:bit_count     is (B + (BITS_PER_BYTE - 1)) / BITS_PER_BYTE
    byte_offset B:bit_count     is (B + (BITS_PER_BYTE - 1)) / BITS_PER_BYTE
    bit_count   B:byte_count    is B / BITS_PER_BYTE
    bit_offset  B:byte_offset   is B / BITS_PER_BYTE

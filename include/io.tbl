// *****************************************************************************
// io.tbl                                                             XL project
// *****************************************************************************
//
// File description:
//
//     Implementation of basic text I/O
//
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3+
// (C) 2015-2020, Christophe de Dinechin <christophe@dinechin.org>
// *****************************************************************************
// This file is part of XL
//
// XL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// XL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with XL, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************

PREFIX(WriteText,       boolean, "write", text,
       R_BOOL(std::cout << left.value));
PREFIX(WriteInteger,    boolean, "write", integer,
       R_BOOL(std::cout << (longlong) left.value));
PREFIX(WriteNatural,    boolean, "write", natural,
       R_BOOL(std::cout << left.value));
PREFIX(WriteReal,       boolean, "write", real,
       R_BOOL(std::cout << left.value));
PREFIX(WriteCharacter,  boolean, "write", character,
       R_BOOL(std::cout << left.value));
PREFIX(WriteTree,       boolean, "write", value,
       Tree *value = leftPtr;
       if (Tree *eval = Interpreter::IsClosure(value, nullptr))
           value = eval;
       R_BOOL(std::cout << value));
NAME_FN(WriteNewLine,   boolean, "print",
       R_BOOL(std::cout << "\n"));

PREFIX(DebugTree,       boolean, "debug", value,
       Tree *value = leftPtr;
       R_BOOL(std::cout << value));

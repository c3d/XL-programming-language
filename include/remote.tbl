// *****************************************************************************
// remote.tbl                                                         XL project
// *****************************************************************************
//
// File description:
//
//     Send commands to a remote host
//
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3+
// (C) 2015-2019, Christophe de Dinechin <christophe@dinechin.org>
// *****************************************************************************
// This file is part of XL
//
// XL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// XL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with XL, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************

// WARNING: In all the following, we do a two-step evaluation, e.g. we use
//    int result = foo(...);
//    R_INT(result);
// instead of the simpler
//    R_INT(foo(...))
//
// This is intentional and necessary. The reason is that a macro like R_INT
// does a 'new Natural(arg)', which some compilers will optimize by splitting
// it into an 'operator new' followed by the evaluation of 'arg'. In our case,
// the called function foo(...) often does various evaluations, e.g as a
// result of calling xl_parse_tree. These evaluations may cause multiple
// garbage collections, which may end up cleaning up the block allocated
// by 'operator new' before we even began using it!
//
// This is an issue with the garbage collector that will need fixing, but
// until it is addressed, the two step evaluation is a requirement.


FUNCTION(tell, natural,
         PARM(host, text)
         PARM(code, tree),
         int rc = xl_tell(XL_SCOPE, host, &code);
         R_INT(rc));

FUNCTION(ask, tree,
         PARM(host, text)
         PARM(code, tree),
         Tree_p rc = xl_ask(XL_SCOPE, host, &code);
         RESULT(rc));

FUNCTION(invoke, tree,
         PARM(host, text)
         PARM(code, tree),
         Tree_p rc = xl_invoke(XL_SCOPE, host, &code);
         RESULT(rc));

FUNCTION(reply, natural,
         PARM(code, tree),
         int reply = xl_reply(XL_SCOPE, &code);
         R_INT(reply));

FUNCTION(listen_on, natural,
         PARM(port, natural),
         int rc = xl_listen(XL_SCOPE, 0, port);
         R_INT(rc));

FUNCTION(listen, natural, ,
         int rc = xl_listen(XL_SCOPE, 0);
         R_INT(rc));

FUNCTION(listen_forking, natural, ,
         int rc = xl_listen(XL_SCOPE, Opt::remoteForks);
         R_INT(rc));

FUNCTION(listen_hook, tree,
         PARM(hook, tree),
         RESULT(xl_listen_hook(&hook)));

NAME_FN(ListenReceived, tree, "listen_received",
        RESULT(xl_listen_received()));

NAME_FN(GetPid, natural, "process_id",
        R_INT(getpid()));
